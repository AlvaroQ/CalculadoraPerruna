apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'// Added Firebase Crashlytics plugin.
apply plugin: 'com.google.devtools.ksp'

android {
    namespace 'com.alvaroquintana.edadperruna'
    packagingOptions {
        exclude 'META-INF/gradle/incremental.annotation.processors'
    }

    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildtoolsVersion

    signingConfigs {
        config {
            keyAlias EDADPERRUNA_RELEASE_KEY_ALIAS
            keyPassword EDADPERRUNA_RELEASE_KEY_PASSWORD
            storeFile file(EDADPERRUNA_RELEASE_STORE_FILE)
            storePassword EDADPERRUNA_RELEASE_STORE_PASSWORD
        }
        debug {
            keyAlias EDADPERRUNA_RELEASE_KEY_ALIAS
            keyPassword EDADPERRUNA_RELEASE_KEY_PASSWORD
            storeFile file(EDADPERRUNA_RELEASE_STORE_FILE)
            storePassword EDADPERRUNA_RELEASE_STORE_PASSWORD
        }
    }
    defaultConfig {
        applicationId names.applicationId
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versions.code
        versionName versions.name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            jniDebuggable true
            testCoverageEnabled true
            debuggable true
            signingConfig signingConfigs.debug
            minifyEnabled false
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }

            resValue 'string', 'BANNER_MAIN', getAdmobBannerTestId()
            resValue 'string', 'BANNER_LIST', getAdmobBannerTestId()
            resValue 'string', 'INTERSTICIAL_RESULT', getAdmobIntersticialTestId()
            resValue 'string', 'BONIFICADO_LIST', getAdmobBonificadoTestId()
            resValue 'string', 'BANNER_PREFERENCES', getAdmobBannerTestId()
            resValue 'string', 'BANNER_DESCRIPTION', getAdmobBannerTestId()

            buildConfigField 'Boolean', 'uploadBreedsFromJSON', 'true'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
            signingConfig signingConfigs.config
            firebaseCrashlytics {
                mappingFileUploadEnabled true
            }

            resValue 'string', 'BANNER_MAIN', getAdmobBannerMainId()
            resValue 'string', 'BANNER_LIST', getAdmobBannerListId()
            resValue 'string', 'INTERSTICIAL_RESULT', getAdmobIntersticialResultId()
            resValue 'string', 'BONIFICADO_LIST', getAdmobBonificadoListId()
            resValue 'string', 'BANNER_PREFERENCES', getAdmobPreferencesTestId()
            resValue 'string', 'BANNER_DESCRIPTION', getAdmobDescriptionTestId()

            buildConfigField 'Boolean', 'uploadBreedsFromJSON', 'false'
        }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_18
        targetCompatibility = JavaVersion.VERSION_18
    }

    kotlin {
        jvmToolchain(18)
    }

    buildFeatures {
        buildConfig = true
    }
    buildFeatures {
        viewBinding true
    }
}


dependencies {
    implementation project(":data")
    implementation project(":domain")
    implementation project(":usecases")

    implementation "io.insert-koin:koin-android:${libsversions.koin_version}"
    implementation "com.google.android.gms:play-services-ads:24.4.0"

//    ksp "com.github.bumptech.glide:glide:4.14.2"
    annotationProcessor 'com.github.bumptech.glide:compiler:4.16.0'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"

    implementation androidLibs.values()
    implementation ui.values()
    implementation androidKtxLibs.values()
    implementation firebaseLibs.values()
    implementation kotlinLibs.values()
    implementation libs.values()
}
configurations.configureEach {
    exclude group: 'com.google.android.gms', module: 'play-services-safetynet'
}
// KEYS ADMOB TEST
def getAdmobBannerTestId() {
    try {
        def stringsFile = file("./src/main/res/values/secrets.xml")
        return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'admob_banner_test_id' }.text()
    } catch(e) {
        println(e)
        return ""
    }
}
def getAdmobBonificadoTestId() {
    try {
        def stringsFile = file("./src/main/res/values/secrets.xml")
        return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'admob_bonificado_test_id' }.text()
    } catch(e) {
        println(e)
        return ""
    }
}
def getAdmobIntersticialTestId() {
    try {
        def stringsFile = file("./src/main/res/values/secrets.xml")
        return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'admob_intersticial_list_id' }.text()
    } catch(e) {
        println(e)
        return ""
    }
}

// KEYS ADMOB PRODUCTION
def getAdmobBannerMainId() {
    try {
        def stringsFile = file("./src/main/res/values/secrets.xml")
        return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'admob_banner_main_id' }.text()
    } catch(e) {
        println(e)
        return ""
    }
}
def getAdmobBannerListId() {
    try {
        def stringsFile = file("./src/main/res/values/secrets.xml")
        return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'admob_banner_list_id' }.text()
    } catch(e) {
        println(e)
        return ""
    }
}
def getAdmobPreferencesTestId() {
    try {
        def stringsFile = file("./src/main/res/values/secrets.xml")
        return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'admob_banner_settings_id' }.text()
    } catch(e) {
        println(e)
        return ""
    }
}
def getAdmobDescriptionTestId() {
    try {
        def stringsFile = file("./src/main/res/values/secrets.xml")
        return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'admob_banner_description_id' }.text()
    } catch(e) {
        println(e)
        return ""
    }
}
def getAdmobIntersticialResultId() {
    try {
        def stringsFile = file("./src/main/res/values/secrets.xml")
        return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'admob_intersticial_result_id' }.text()
    } catch(e) {
        println(e)
        return ""
    }
}
def getAdmobBonificadoListId() {
    try {
        def stringsFile = file("./src/main/res/values/secrets.xml")
        return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'admob_bonificado_list_id' }.text()
    } catch(e) {
        println(e)
        return ""
    }
}