apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'// Added Firebase Crashlytics plugin.

android {
    packagingOptions {
        exclude 'META-INF/gradle/incremental.annotation.processors'
    }

    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildtoolsVersion

    signingConfigs {
        config {
            keyAlias EDADPERRUNA_RELEASE_KEY_ALIAS
            keyPassword EDADPERRUNA_RELEASE_KEY_PASSWORD
            storeFile file(EDADPERRUNA_RELEASE_STORE_FILE)
            storePassword EDADPERRUNA_RELEASE_STORE_PASSWORD
        }
        debug {
            keyAlias EDADPERRUNA_RELEASE_KEY_ALIAS
            keyPassword EDADPERRUNA_RELEASE_KEY_PASSWORD
            storeFile file(EDADPERRUNA_RELEASE_STORE_FILE)
            storePassword EDADPERRUNA_RELEASE_STORE_PASSWORD
        }
    }
    defaultConfig {
        applicationId names.applicationId
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versions.code
        versionName versions.name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            jniDebuggable true
            testCoverageEnabled true
            debuggable true
            signingConfig signingConfigs.debug
            minifyEnabled false
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }

            resValue 'string', 'BANNER_MAIN', getAdmobBannerTestId()
            resValue 'string', 'BANNER_LIST', getAdmobBannerTestId()
            resValue 'string', 'INTERSTICIAL_RESULT', getAdmobIntersticialTestId()
            resValue 'string', 'BONIFICADO_LIST', getAdmobBonificadoTestId()
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
            signingConfig signingConfigs.config
            firebaseCrashlytics {
                mappingFileUploadEnabled true
            }

            resValue 'string', 'BANNER_MAIN', getAdmobBannerMainId()
            resValue 'string', 'BANNER_LIST', getAdmobBannerListId()
            resValue 'string', 'INTERSTICIAL_RESULT', getAdmobIntersticialResultId()
            resValue 'string', 'BONIFICADO_LIST', getAdmobBonificadoListId()
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        viewBinding true
    }
}


dependencies {
    implementation project(":data")
    implementation project(":domain")
    implementation project(":usecases")

    implementation androidLibs.values()
    implementation androidKtxLibs.values()
    implementation kotlinLibs.values()
    implementation libs.values()
    kapt androidKaptLibs.values()

    testImplementation testLibs.values()
    testImplementation androidxTestLibs.values()
    androidTestImplementation androidTestLibs.values()
}
// KEYS ADMOB TEST
def getAdmobBannerTestId() {
    try {
        def stringsFile = file("./src/main/res/values/secrets.xml")
        return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'admob_banner_test_id' }.text()
    } catch(e) {
        println(e)
        return ""
    }
}
def getAdmobBonificadoTestId() {
    try {
        def stringsFile = file("./src/main/res/values/secrets.xml")
        return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'admob_bonificado_test_id' }.text()
    } catch(e) {
        println(e)
        return ""
    }
}
def getAdmobIntersticialTestId() {
    try {
        def stringsFile = file("./src/main/res/values/secrets.xml")
        return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'admob_intersticial_list_id' }.text()
    } catch(e) {
        println(e)
        return ""
    }
}

// KEYS ADMOB PRODUCTION
def getAdmobBannerMainId() {
    try {
        def stringsFile = file("./src/main/res/values/secrets.xml")
        return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'admob_banner_main_id' }.text()
    } catch(e) {
        println(e)
        return ""
    }
}
def getAdmobBannerListId() {
    try {
        def stringsFile = file("./src/main/res/values/secrets.xml")
        return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'admob_banner_list_id' }.text()
    } catch(e) {
        println(e)
        return ""
    }
}
def getAdmobIntersticialResultId() {
    try {
        def stringsFile = file("./src/main/res/values/secrets.xml")
        return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'admob_intersticial_result_id' }.text()
    } catch(e) {
        println(e)
        return ""
    }
}
def getAdmobBonificadoListId() {
    try {
        def stringsFile = file("./src/main/res/values/secrets.xml")
        return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'admob_bonificado_list_id' }.text()
    } catch(e) {
        println(e)
        return ""
    }
}